"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.program = void 0;
const commander = require("commander");
const helpers_1 = require("../helpers");
const metadata_1 = require("../metadata");
let instances = 0;
function program() {
    instances += 1;
    if (instances > 1) {
        throw new Error('Only one instance of @program is permitted.');
    }
    return function (constructor) {
        const mixin = class extends constructor {
            constructor(...args) {
                super(...args);
                if (!this.run) {
                    console.error('Program class must define a run() method.');
                    process.exit(1);
                }
                const cmd = (0, helpers_1.prepareCommand)(this, 'run');
                if (cmd) {
                    commander.command(cmd);
                }
                const options = Object.keys(this).reduce((list, prop) => {
                    if (Reflect.hasMetadata(metadata_1.OptionsMetadata, this, prop)) {
                        const metadata = Reflect.getMetadata(metadata_1.OptionsMetadata, this, prop);
                        list.push(metadata);
                    }
                    return list;
                }, []);
                const chainAfterOptions = options
                    .reduce((prev, option) => {
                    return prev.option.apply(prev, option[0].args);
                }, commander);
                commander.parse(process.argv);
                if (this.run) {
                    this.run.apply(commander, (0, helpers_1.injectArgs)(commander, this, 'run'));
                }
            }
        };
        (0, helpers_1.initCommander)(constructor);
        return mixin;
    };
}
exports.program = program;
function prepareProgram(target) {
    let argList = '';
    if (Reflect.hasMetadata(metadata_1.OptionsMetadata, target)) {
        const args = Reflect.getMetadata(metadata_1.OptionsMetadata, target);
        argList = args
            .map((arg) => {
            return arg.toString();
        })
            .join(' ')
            .replace(/^(.)/, ' $1');
    }
    return `${argList}`;
}
//# sourceMappingURL=program.decorator.js.map